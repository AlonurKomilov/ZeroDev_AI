name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    - name: Run tests
      run: pytest backend/tests/

    - name: Generate OpenAPI (fallback)
      run: |
        python - <<'PY'
        import json, importlib
        app = None
        for mod in ("backend.main", "main", "api", "app"):
            try:
                m = importlib.import_module(mod)
                app = getattr(m, "app", None)
                if app: break
            except Exception:
                pass
        if app is None:
            from fastapi import FastAPI
            app = FastAPI(title="health_app");
            @app.get("/healthz")
            def _h(): return {"status":"ok"}
        with open("openapi.json","w") as f:
            json.dump(app.openapi(), f, indent=2)
        print("openapi.json written")
        PY

    - name: Validate OpenAPI
      run: |
        python -m pip install openapi-spec-validator
        openapi-spec-validator openapi.json

    - name: Upload OpenAPI artifact
      uses: actions/upload-artifact@v4
      with:
        name: openapi
        path: openapi.json

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm install
      working-directory: ./frontend
    - name: Run tests
      run: npm test
      working-directory: ./frontend

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
    - name: Run linters
      run: |
        black --check .
        ruff .
        mypy .
      working-directory: ./backend
